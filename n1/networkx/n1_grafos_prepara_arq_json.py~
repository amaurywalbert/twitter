# -*- coding: latin1 -*-
################################################################################################
# Script para preparar os arquivos JSON coletados com todos os usuários e separa em aquivos individuais para não sobrecarregar a memória RAM
#	
#
import tweepy, datetime, sys, time, json, os, os.path, shutil, time, struct	


reload(sys)
sys.setdefaultencoding('utf-8')

################################################################################################
# Recebe os dados do ego e salva num arquivo
################################################################################################
def save_data_str(user,friends):
	path = output_dir_str+str(user)+".str"
	if not os.path.exists(path):
		with open(path, "a+") as f:
			for friend in friends:
				f.writelines(str(friend)+"\n")													# Salva o usuário no arquivo de users já verificados.
	else:
		print ("Arquivo já criado. User: "+str(user))

################################################################################################
# Recebe os dados do ego e salva num arquivo JSON
################################################################################################
def save_data_json(user,friends):
	path = output_dir_json+str(user)+".json"
	if not os.path.exists(path):
		with open(path, "a+") as f:
			f.write(json.dumps(friends))
	else:
		print ("Arquivo já criado. User: "+str(user))
	
################################################################################################
# Gera arquivos individuais para os egos
################################################################################################
def create_ego_files():
########################################### Naõ compensa user string pois demora mais e os arquivos são quase do mesmo tamanho
#	with open(egos_file,'r') as egos_friends:
#		t_i = datetime.datetime.now()
#		for line in egos_friends:
#			data = json.loads(line)
#			user = data['ego_id']
#			friends = data['ego_friends']
#			save_data_str(user,friends)
#		t_f = datetime.datetime.now()
#		t = t_f-t_i
#		print ("Tempo total para salvar arquivos str = "+str(t))
#		print ("##################################################################################")
#	
	with open(egos_file,'r') as egos_friends:
		t_i = datetime.datetime.now()
		for line in egos_friends:
			data = json.loads(line)
			user = data['ego_id']
			friends = data['ego_friends']
			save_data_json(user,friends)
		t_f = datetime.datetime.now()
		t = t_f-t_i
		print ("Tempo total para salvar arquivos json = "+str(t))
		print ("##################################################################################")
		
################################################################################################
# Gera arquivos individuais para os alters
################################################################################################
def create_alter_files():
#	with open(alters_file,'r') as alters_friends:
#		t_i = datetime.datetime.now()
#		for line in alters_friends:
#			data = json.loads(line)
#			user = data['alter_id']
#			friends = data['alter_friends']
#			save_data_str(user,friends)
#		t_f = datetime.datetime.now()
#		t = t_f-t_i
#		print ("Tempo total para salvar arquivos str = "+str(t))
#		print ("##################################################################################")
#	
	with open(alters_file,'r') as alters_friends:
		t_i = datetime.datetime.now()
		for line in alters_friends:
			data = json.loads(line)
			user = data['alter_id']
			friends = data['alter_friends']
			save_data_json(user,friends)
		t_f = datetime.datetime.now()
		t = t_f-t_i
		print ("Tempo total para salvar arquivos json = "+str(t))
		print ("##################################################################################")

################################################################################################
# Método Principal do Script
################################################################################################
def main():
	create_ego_files()
	create_alter_files()
	print("Script finalizado!")

################################################################################################
#
# INÍCIO DO PROGRAMA
#
################################################################################################

################################ CONFIGURAR AS LINHAS A SEGUIR #################################
################################################################################################
output_dir_str = "/home/amaury/coleta/n1_10egos/json/files/str/" #################### Diretório para armazenamento das imagens das redes ego 
output_dir_json = "/home/amaury/coleta/n1_10egos/json/files/json/" #################### Diretório para armazenamento das imagens das redes ego
egos_file = "/home/amaury/coleta/n1_10egos/json/egos/data/friends_data_full.json" #################### Diretório para armazenamento dos arquivos
alters_file = "/home/amaury/coleta/n1_10egos/json/alters/data/friends_data_full.json" #################### Diretório para armazenamento dos arquivos
users_list_file = "/home/amaury/coleta//n1/egos/egos_list.txt" #### Arquivo contendo a lista dos usuários a serem buscados
ego_limit = 10					####################################### Controla a quantidade de egos a serem pesquisados
################################################################################################
################################################################################################
#Cria os diretórios para armazenamento das redes ego (grafos)
if not os.path.exists(output_dir_str):
	os.makedirs(output_dir_str)
if not os.path.exists(output_dir_json):
	os.makedirs(output_dir_json)

#Executa o método main
if __name__ == "__main__": main()	