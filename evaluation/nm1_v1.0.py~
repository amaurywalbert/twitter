# -*- coding: latin1 -*-
################################################################################################
import datetime, sys, time, json, os, os.path, shutil, time, struct, random

reload(sys)
sys.setdefaultencoding('utf-8')

######################################################################################################################################################################
######################################################################################################################################################################
##		Status - Versão 1 - Calcular NMI
##								
## # INPUT: Arquivos com as comunidades detectadas e o ground truth 
## # OUTPUT:
##		- Arquivos com os índices NMI
######################################################################################################################################################################

######################################################################################################################################################################
#
# Cálculos iniciais sobre o conjunto de dados lidos.
#
######################################################################################################################################################################
def nmi():
	#!/bin/bash
######################################################################################################################################################################
##		Status - Versão 1 - Rodar o algoritmo de validação dos resultados - Nomalized Mutual Information
##					- NMI - Andrea Lancichinetti et al 2009 New J. Phys. 11 033015
##			 					
## # INPUT:
##		- Comunidades detectadas - Arquivos texto para cada ego em que cada linha contendo os ids do usuários representam uma comunidade do ego.
##		- Comunidades Ground-Truth - Arquivo texto para cada ego em que cada linha contendo os ids do usuários representam uma Lista do ego.
## # OUTPUT:
##		- Comunidades
######################################################################################################################################################################

op=0
clear
METRIC="nmi"


copra()
{
	clear
	TYPE_GRAPH=$1
	NET=$2
	METRIC=$3
	SINGLETONS=$4
	ALG=$5
	GROUND_TRUTH=/home/amaury/dataset/ground_truth/lists_users_TXT/$SINGLETONS/
	COMMUNITIES=/home/amaury/communities/$TYPE_GRAPH/$ALG/$SINGLETONS/$NET/
	OUTPUT_DIR=/home/amaury/Dropbox/evaluation/$TYPE_GRAPH/$ALG/$METRIC/$SINGLETONS/$NET/
	############################################################################################################
	mkdir -p $OUTPUT_DIR
	V=20	#Parâmetro do COPRA
	echo
	echo
	echo "Os arquivos serão armazenados em: $OUTPUT_DIR"
	for ((THRESHOLD=1; THRESHOLD<=$V; THRESHOLD++)); do
		i=0 		#Ponteiro para o ego
		e=0		#Quantidade de arquivos compativeis... Alguns arquivos para algumas variações do parâmetro V não foram obtidos.
		if [ -e $OUTPUT_DIR$THRESHOLD".txt" ] ; then
			rm $OUTPUT_DIR$THRESHOLD".txt"				# Remover arquivos existentes na pasta de saída antes de começar a redirecionar novos resultados.
		fi	
		for file in `ls $COMMUNITIES$THRESHOLD`; do
			let i=$i+1;
			IFS="." read -a fields <<<"$file"					# Renomear (temp) o arquivo "clusters-97197087.edge_list" para clusters-97197087
			IFS="-" read -a file_temp <<<"${fields[0]}"		# Renomear (temp) o arquivo "97197087.edge_list" para 97197087
			
			if [ -e $GROUND_TRUTH${file_temp[1]}".txt" ] ; then
				echo "Calculando $METRIC para o ego: $i - THRESHOLD $THRESHOLD"
				/home/amaury/algoritmos/Metricas/mutual3/mutual $COMMUNITIES$THRESHOLD/$file $GROUND_TRUTH${file_temp[1]}".txt" >> $OUTPUT_DIR$THRESHOLD".txt"
				let e=$e+1;
			else
				echo "ERROR - EGO: $i - Arquivo não encontrado!"
			fi
		done
		echo "COPRA - Total de arquivos verificados para o THRESHOLD $THRESHOLD: $e"
	echo "###############################################################"
	echo "###############################################################"
	echo
	done
}

############################################################################################################
echo "###############################################################"
echo "																					"
echo " Algoritmo para cálculo da métrica $METRIC - versão BATCH"
echo "																					"
echo "###############################################################"
echo
echo "Realizar o cálculo usando Singletons?" 
echo " 01 - SIM (Padrão)"
echo " 02 - NÃO"
echo
echo -n "Escolha uma opção: "
read op

if [ -z $op ]; then
	SINGLETONS="singletons"
elif [ $op == 02 ]; then
	SINGLETONS="full"
else
	SINGLETONS="without_singletons"
fi

echo "###############################################################"
echo
echo " 01 - COPRA"
echo	
echo -n "Informe o algoritmo que gerou as comunidades para que seja calculada a métrica: "
read op2
case $op2 in
	01)ALG=copra
		for ((i=1; i<=10; i++)); do
			NET="n$i"
			echo "Calculando $METRIC das comunidades detectadas pelo algoritmo $ALG na rede $NET"
			copra "graphs_with_ego" $NET $METRIC $SINGLETONS $ALG
			copra "graphs_without_ego" $NET $METRIC $SINGLETONS $ALG
		done
		;;

	*) echo
		echo "Opção Inválida! Saindo do script..."
		echo
		exit
		;;
esac





######################################################################################################################################################################
#
# Método principal do programa.
# Realiza teste e coleta dos dados de cada user especificado no arquivo. 
#
######################################################################################################################################################################
######################################################################################################################################################################
def main():
	os.system('clear')
	print	
	print "#######################################################################"	
	print
	print ("Métrica a ser aplicada na geração dos resultados:")
	print
	print("01 - NMI - Normalized Mutual Infomation. ")
	print("02 - Ômega Index.")
	print("03 - Jaccard Similarity.")
	print
	print
	metric_op = int(raw_input("Escolha uma opção acima: "))
	if metric_op == 01:
		metric = "nmi"
#	elif metric_op == 02:
#		metric = "omega"
#	elif metric_op == 03:
#		metric = "jaccard"
	else:
		metric = ""
		print("Opção inválida! Saindo...")
		exit()	
#######################################################################	
	print	
	print "#######################################################################"	
	print
	print ("Algoritmo usado no processo de deteção de comunidades:")
	print
	print("01 - COPRA. ")
	print("02 - ")
	print("03 - ")
	print
	algorithm_op = int(raw_input("Escolha uma opção acima: "))
	if algorithm_op == 01 and metric_op == 01: 
		algorithm = "copra"
#######################################################################		
		
		communities = "graphs_with_ego/"+algorithm+"/"+str(metric)+"/full/"							# Diretório para procurar pelos arquivos do Threshold do COPRA
		data = nmi_copra(communities)																				# Chama função e passa o parâmetros para cálcular as estatísticas para os resultados obtidos pelo algoritmo em questão
		save_data(communities,data)	


		communities = "graphs_with_ego/"+algorithm+"/"+str(metric)+"/without_singletons/"		# Diretório para procurar pelos arquivos do Threshold do COPRA
		data = nmi_copra(communities)																				# Chama função e passa o parâmetros para cálcular as estatísticas para os resultados obtidos pelo algoritmo em questão
		save_data(communities,data)
#######################################################################		

		communities = "graphs_without_ego/"+algorithm+"/"+str(metric)+"/full/"						# Diretório para procurar pelos arquivos do Threshold do COPRA
		data = nmi_copra(communities)																				# Chama função e passa o parâmetros para cálcular as estatísticas para os resultados obtidos pelo algoritmo em questão
		save_data(communities,data)

		communities = "graphs_without_ego/"+algorithm+"/"+str(metric)+"/without_singletons/"	# Diretório para procurar pelos arquivos do Threshold do COPRA
		data = nmi_copra(communities)																				# Chama função e passa o parâmetros para cálcular as estatísticas para os resultados obtidos pelo algoritmo em questão
		save_data(communities,data)
#######################################################################
	else:
		algorithm = ""
		print("Opção inválida! Saindo...")
		exit()
#######################################################################
	print
	print("######################################################################")
	print("Script finalizado!")
	print("######################################################################\n")

	
######################################################################################################################################################################
#
# INÍCIO DO PROGRAMA
#
######################################################################################################################################################################

######################################################################################################################
#####Alterar as linhas para Dropbox quando executado em ambiente de produção
#source_dir = "/home/amaury/Dropbox/evaluation/"
#output_dir = "/home/amaury/Dropbox/statistics/"
source_dir = "/home/amaury/evaluation/"
output_dir = "/home/amaury/statistics/"
######################################################################################################################


if __name__ == "__main__": main()