# -*- coding: latin1 -*-
################################################################################################
import snap,datetime, sys, time, json, os, os.path, shutil, time, struct, random
import calc


reload(sys)
sys.setdefaultencoding('utf-8')

######################################################################################################################################################################
######################################################################################################################################################################
##		Status - Versão 1 - Calcular métrica definida abaixo para avaliação sem ground truth - Usando a Algoritmo em Java desenvolvido pelo Chen - 
##									Modularity Density - https://github.com/chenmingming/ComQualityMetric - mais antigo - orientado pelo BoleslawS
##
######################################################################################################################################################################

		
######################################################################################################################################################################
#
# Recebe arquivo e devolve dicionário com as comunidades
#
######################################################################################################################################################################
def prepare_communities(community_file):
	i=0
	communities = {}
	for line in community_file:
		i+=1
		key="com"+str(i)																# Chave para o dicionário comm
		comm = []																		# Lista para armazenar as comunidades			
		a = line.split(' ')
		for item in a:
			if item != "\n":
				comm.append(long(item))
		communities[key] = comm														# dicionário communities recebe a lista de ids das comunidades tendo como chave o valor key
	return communities

######################################################################################################################################################################
#
# Criar diretórios
#
######################################################################################################################################################################
def create_dirs(paths):
	for item in paths:
		if not os.path.exists(item):
			os.makedirs(item)	

######################################################################################################################################################################
#
# Cálculos iniciais sobre o conjunto de dados lidos.
#
######################################################################################################################################################################
def calculate_alg(singletons,net,uw,ud,g_type,alg):
	
	communities = "/home/amaury/communities_hashmap/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/" 
	graphs = "/home/amaury/graphs_hashmap/"+str(net)+"/"+str(g_type)+"/"
	
	out_Q = str(output_dir)+"modularity/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"		
	out_NQ = str(output_dir)+"N_modularity/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"	
	out_Qds = str(output_dir)+"modularity_density/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_intra_edges = str(output_dir)+"intra_edges/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_intra_density = str(output_dir)+"intra_density/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_contraction = str(output_dir)+"contraction/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_inter_edges = str(output_dir)+"inter_edges/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_expansion = str(output_dir)+"expansion/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_conductance = str(output_dir)+"conductance/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_fitness = str(output_dir)+"fitness/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	out_modularity_degree = str(output_dir)+"modularity_degree/"+str(g_type)+"/"+str(alg)+"/"+str(singletons)+"/"+str(net)+"/"
	
	_avg_time = []
	
	if not os.path.exists(communities):
		print ("Diretório com as comunidades não encontrado: "+str(communities)+"\n")

	else:
		print("\n######################################################################")

		for threshold in os.listdir(communities):
			if not os.path.isdir(str(communities)+str(threshold)+"/"):
				print ("Threshold para a rede "+str(net)+" não encontrado: "+str(threshold))

			else:
				partial_start = time.time()
				paths = [out_Q,out_NQ,out_Qds,out_intra_edges,out_intra_density,out_contraction,out_inter_edges,out_expansion,out_conductance,out_fitness,out_modularity_degree]
				create_dirs(paths)

				if os.path.exists(str(out_Q)+str(threshold)+".json") and os.path.exists(str(out_NQ)+str(threshold)+".json") and os.path.exists(str(out_Qds)+str(threshold)+".json") and os.path.exists(str(out_intra_edges)+str(threshold)+".json") and os.path.exists(str(out_intra_density)+str(threshold)+".json") and os.path.exists(str(out_contraction)+str(threshold)+".json") and os.path.exists(str(out_inter_edges)+str(threshold)+".json")  and os.path.exists(str(out_expansion)+str(threshold)+".json") and os.path.exists(str(out_conductance)+str(threshold)+".json") and os.path.exists(str(out_fitness)+str(threshold)+".json") and os.path.exists(str(out_modularity_degree)+str(threshold)+".json"):
					print ("Arquivo de destino já existe: "+str(threshold)+".json")
					
				else:	
					print("######################################################################")
							
					Q = {}		
					NQ = {}	
					Qds = {}
					intra_edges = {}
					intra_density = {}
					contraction = {}
					inter_edges = {}
					expansion = {}
					conductance = {}
					fitness = {}
					modularity_degree = {}
					
					i=0 		#Ponteiro para o ego
					for file in os.listdir(str(communities)+str(threshold)+"/"):
						if os.path.isfile(str(communities)+str(threshold)+"/"+file):
							ego_id = file.split(".txt")
							ego_id = long(ego_id[0])
							i+=1

							if not os.path.isfile(str(graphs)+str(ego_id)+".edge_list"):
								print ("ERROR - EGO: "+str(i)+" - Arquivo com lista de arestas não encontrado:" +str(graphs)+str(ego_id)+".edge_list")

							else:
								with open(str(communities)+str(threshold)+"/"+file, 'r') as community_file:

									print(str(g_type)+" - "+str(alg)+" - "+str(singletons)+" - Rede: "+str(net)+" - THRESHOLD: "+str(threshold)+" - ego("+str(i)+"): "+str(file))
									
									communities_dict = prepare_communities(community_file)							#Função para devolver um dicionário com as comunidades							
									

									if ud is False:		# Para grafo Directed
										execute = subprocess.Popen(["/home/amaury/algoritmos/Infomap/Infomap","-i link-list", str(graphs)+str(file), str(output), "--out-name "+str(ego_id), "-N 10", "--directed", "--two-level", "--map"], stdout=subprocess.PIPE)
									else:						# Para grafos Undirected							
										execute = subprocess.Popen(["/home/amaury/algoritmos/Infomap/Infomap","-i link-list", str(graphs)+str(file), str(output), "--out-name "+str(ego_id), "-N 10", "--undirected", "--two-level", "--map"], stdout=subprocess.PIPE)
									value = execute.communicate()[0]
									print value
	
									avg_Q,avg_NQ,avg_Qds,avg_intra_edges,avg_intra_density,avg_contraction,avg_inter_edges,avg_expansion,avg_conductance,avg_fitness,avg_modularity_degree
									
#									average_degree[ego_id] = avg_ad
#									conductance[ego_id] = avg_c
#									cut_ratio[ego_id] = avg_cut_r
#									density[ego_id] = avg_d
#									expansion[ego_id] = avg_e
#									normalized_cut[ego_id] = avg_normal_cut
#									separability[ego_id] = avg_s	
#			
#									print ("Average Degree: "+str(avg_ad['media'])+" - Conductance: "+str(avg_c['media'])+" - Cut Ratio: "+str(avg_cut_r['media'])+" - Density: "+str(avg_d['media']))
#									print ("Expansion: "+str(avg_e['media'])+" - Normalized Cut: "+str(avg_normal_cut['media'])+" - Separability: "+str(avg_s['media']))
#									print 
#					print("######################################################################")	
#
#					with open(str(out_ad)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(average_degree))
#						
#					with open(str(out_c)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(conductance))
#
#					with open(str(out_cut_r)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(cut_ratio))
#											
#					with open(str(out_d)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(density))
#
#					with open(str(out_e)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(expansion))
#
#					with open(str(out_normal_cut)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(normalized_cut))
#
#					with open(str(out_s)+str(threshold)+".json", "w") as f:
#						f.write(json.dumps(separability))						
				
				partial_end = time.time()
				partial_time_exec = partial_end - partial_start
				print ("\nTempo de execução para o threshold "+str(threshold)+": "+str(partial_time_exec)+"\n")
				_avg_time.append(partial_time_exec)
	avg_time = calc.calcular(_avg_time)
	print ("\nTempo de médio de execução em cada threshold: "+str(avg_time)+"\n")
	print("\n######################################################################\n")		

######################################################################################################################################################################
#
# Método principal do programa.
# Realiza teste e coleta dos dados de cada user especificado no arquivo. 
#
######################################################################################################################################################################
######################################################################################################################################################################
def main():
	os.system('clear')
	print "################################################################################"
	print"																											"
	print" 			Avaliação de Comunidades - Amaury's Software										"
	print"																											"
	print"#################################################################################"
	print
	print
	print"  1 - Follow"
	print"  9 - Follwowers"
	print"  2 - Retweets"
	print"  3 - Likes"
	print"  4 - Mentions"
	
	print " "
	print"  5 - Co-Follow"
	print" 10 - Co-Followers"				
	print"  6 - Co-Retweets"
	print"  7 - Co-Likes"
	print"  8 - Co-Mentions"
			
	print
	op = int(raw_input("Escolha uma opção acima: "))

	if op in (5,6,7,8,10):																						# Testar se é um grafo direcionado ou não
		ud = True
	elif op in (1,2,3,4,9):
		ud = False 
	else:
		print("Opção inválida! Saindo...")
		sys.exit()

	if op == 1 or op == 9:																						# Testar se é um grafo direcionado ou não
		uw = True
	else:
		uw = False
	print
	print ("\n")
######################################################################
	
	net = "n"+str(op)	

#######################################################################
#######################################################################
	print("######################################################################")	
	print
	print "Algoritmo utilizado na detecção das comunidades"
	print 
	print
	print"  1 - COPRA"
	print"  2 - OSLOM"
	print"  3 - GN"		
	print"  4 - COPRA - Partition"
	print"  5 - INFOMAP - Partition"						
	print
	op2 = int(raw_input("Escolha uma opção acima: "))

	if op2 == 1:
		alg = "copra"
	elif op2 == 2:
		alg = "oslom"
	elif op2 == 3:
		alg = "gn"
	elif op2 == 4:
		alg = "copra_partition"
	elif op2 == 5:
		alg = "infomap"					
	else:
		alg = ""
		print("Opção inválida! Saindo...")
		sys.exit()		
	print
	print ("\n")
#######################################################################
#######################################################################	

	print
	print ("Opção escolhida: "+str(net)+" - "+str(alg))
	print ("Aguarde...")
	time.sleep(5)
	
######################################################################################################################
	g_type1 = "graphs_with_ego"
	g_type2 = "graphs_without_ego"
	
	singletons1 = "full"
	singletons2 = "without_singletons"

	
######################################################################################################################
	os.system('clear')

	start = time.time()
	
	print ("Calculando métricas nas comunidades detectadas na rede: "+str(net)+" - "+str(g_type1)+" - Algoritmo: "+str(alg)+" - "+str(singletons1))
	calculate_alg(singletons1,net,uw,ud,g_type1,alg)
	

	print ("Calculando métricas nas comunidades detectadas na rede: "+str(net)+" - "+str(g_type2)+" - Algoritmo: "+str(alg)+" - "+str(singletons1))
	calculate_alg(singletons1,net,uw,ud,g_type2,alg)

	end = time.time()
	time_exec = end - start
######################################################################################################################		

	print("######################################################################")
	print("\nScript finalizado! Tempo de execução: "+str(time_exec)+"\n")
	print("######################################################################\n")

######################################################################################################################################################################
#
# INÍCIO DO PROGRAMA
#
######################################################################################################################################################################

output_dir = "/home/amaury/Dropbox/evaluation_hashmap/without_ground_truth/chen/"

######################################################################################################################
if __name__ == "__main__": main()
