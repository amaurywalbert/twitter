# -*- coding: latin1 -*-
################################################################################################
#	
#
import snap, datetime, sys, time, json, os, os.path, shutil, time, random, math
import numpy as np
from math import*
# Script auxiliar para cálculos matemáticos que deve estar no mesmo diretório deste aqui.
import calc
# Script auxiliar para gerar histogramas
import histogram
import networkx as nx
reload(sys)
sys.setdefaultencoding('utf-8')

######################################################################################################################################################################
##		Status - Versão 1 - Script para calcular o jaccard entre os conjuntos de vértices das redes-ego, par-a-par e armazenar em um arquivo texto.
##								- Considerar apenas redes-ego com a presença do ego.
## 
##	INPUT: Redes-ego
##
## Output: arquivo texto. Formato:
##
##ID_ego a:amigos s:seguidores r:retuítes l:likes m:menções 
######################################################################################################################################################################


######################################################################################################################################################################
#
# Armazenar as propriedades do dataset
#
######################################################################################################################################################################
def net_structure(dataset_dir,output_dir,net,IsDir, weight):
	print("\n######################################################################\n")
	if os.path.isfile(str(output_dir)+str(net)+"_clustering_coef.json"):
		print ("Arquivo já existe: "+str(output_dir)+str(net)+"_clustering_coef.json")
	else:

		print ("Dataset clustering coefficient - " +str(dataset_dir))
											
		cf = []																										# Média dos coeficientes de clusterings por rede-ego
		gcf = []																										# Média usando opção global
		n = []																										# vetor com número de vértices para cada rede-ego																									
		e = []																										# vetor com número de arestas para cada rede-ego
		i = 0

		for file in os.listdir(dataset_dir):

			i+=1 
			print (str(output_dir)+str(net)+"/"+str(file)+" - Calculando propriedades para o ego "+str(i)+": "+str(file))
			if IsDir is True:
				G = snap.LoadEdgeList(snap.PNGraph, dataset_dir+file, 0, 1)					   # load from a text file - pode exigir um separador.: snap.LoadEdgeList(snap.PNGraph, file, 0, 1, '\t')
			else:
				G = snap.LoadEdgeList(snap.PUNGraph, dataset_dir+file, 0, 1)					# load from a text file - pode exigir um separador.: snap.LoadEdgeList(snap.PNGraph, file, 0, 1, '\t')
#			G.Dump()
#			time.sleep(5)

#####################################################################################		

			n.append(G.GetNodes())																		# Numero de vertices
			e.append(G.GetEdges())																		# Numero de arestas
			n_nodes = G.GetNodes()	
			n_edges = G.GetEdges()
		
#####################################################################################
#Usando opção local - Retorna o mesmo resultado do global
			if n_edges == 0:
				a = 0
				cf.append(a)
				print ("Nenhuma aresta encontrada para a rede-ego "+str(i)+" - ("+str(file))				
			else:	
				NIdCCfH = snap.TIntFltH()
				snap.GetNodeClustCf(G, NIdCCfH)
				_cf = []
				for item in NIdCCfH:
					_cf.append(NIdCCfH[item])																# Clusterinf Coefficient
				result = calc.calcular(_cf)
				cf.append(result['media'])
				print ("Clustering Coef para o ego "+str(i)+" ("+str(file)+"): "+str(result['media']))
				print  				

	
		overview = {}
		overview['ClusteringCoefficient'] = CF


		
		with open(str(output_dir)+str(net)+"_clustering_coef.json", 'w') as f:
			f.write(json.dumps(overview))
	

print("\n######################################################################\n")

######################################################################################################################################################################
######################################################################################################################################################################
#
# Método principal do programa. 
#
######################################################################################################################################################################
######################################################################################################################################################################

def main():
	os.system('clear')
	print "################################################################################"
	print"																											"
	print" Script para cálculo da similaridade (JACCARD)) para a par	entre os alters das camadas"
	print"																											"
	print"#################################################################################"
	print
	nets = [n1,n9,n2,n3,n4] #[amigos,seguidores,retweets,likes,menções]
	for net in nets:
		for j in nets:
			if i != j:
				print i,j

	dataset_dir = "/home/amaury/graphs_hashmap/"+str(net)+"/graphs_with_ego/"								############### Arquivo contendo arquivos com a lista de arestas das redes-ego


	print("\n######################################################################\n")
	print("Script finalizado!")
	print("\n######################################################################\n")

######################################################################################################################################################################
#
# INÍCIO DO PROGRAMA
#
######################################################################################################################################################################


#Executa o método main
if __name__ == "__main__": main()