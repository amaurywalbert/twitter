# -*- coding: latin1 -*-
################################################################################################
#	
#
import tweepy, datetime, sys, time, json, os, os.path, shutil, time, struct, random
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import pylab
import numpy as np
import powerlaw
import seaborn as sns
import plotly
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

reload(sys)
sys.setdefaultencoding('utf-8')

######################################################################################################################################################################
##		Status - Versão 1 - Gera histogramas a partir de um vetor manualmente identificado.
## 
######################################################################################################################################################################

######################################################################################################################################################################
# HTML
######################################################################################################################################################################
def normalized_print(data):
	print ("Criando histograma dinâmico...")
	normalized = [go.Histogram(x=data,marker=dict(color='green'))]
	plotly.offline.plot(normalized, filename=output_di+"histogram_dist_degree.html")
	print ("OK")
	print
	
######################################################################################################################################################################
# Histograma
######################################################################################################################################################################
def histogram(data):
	print ("Criando histograma...")
	
	plt.hist(data,label="Distribuição de graus",color='green')
	plt.xlabel ("Graus")
	plt.ylabel ("Vértices")
	plt.title ("Distribuição de graus")
	plt.legend(loc='best')
	plt.savefig(output_dir+"histogram_dist_degree.png")
	plt.close()

	print ("OK!")
	print

######################################################################################################################################################################
######################################################################################################################################################################
#
# Método principal do programa.
#
######################################################################################################################################################################
######################################################################################################################################################################
def main():
	n=[2,3,1,1,4,3,2]

	histogram(n)
	normalized_print(n)
	
#####################################################################################################################################################################
#
# INÍCIO DO PROGRAMA
#
######################################################################################################################################################################

################################### CONFIGURAR AS LINHAS A SEGUIR ####################################################
######################################################################################################################
output_dir =  "/home/amaury/statistics/"
if not os.path.exists(output_dir):
	os.makedirs(output_dir)
#Executa o método main
if __name__ == "__main__": main()
print("######################################################################")
print("Script finalizado!")
print("######################################################################\n")